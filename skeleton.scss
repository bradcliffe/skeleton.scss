// Skeleton V2.0.4
// Copyright 2014, Dave Gamache
// www.getskeleton.com
// Free to use under the MIT license.
// http://www.opensource.org/licenses/mit-license.php
// 12/29/2014
// SASS port maintained by Ben Radcliffe


// Table of Contents
// ––––––––––––––––––––––––––––––––––––––––––––––––––
// - Variables
// - Functions
// - Mixin(s)
// - Grid
// - Base Styles
// - Typography
// - Links
// - Buttons
// - Forms
// - Lists
// - Code
// - Tables
// - Spacing
// - Utilities
// - Clearing
// - Media Queries


@charset "UTF-8";

/// Skeleton recommends Normalize for a CSS reset, but it is not mandatory.
/// To opt out of using Normalize, simply comment out the line below.
@import "../normalize.css/normalize.css";


// Variables
// ––––––––––––––––––––––––––––––––––––––––––––––––––

// Breakpoints
$bp-extra-small : 400px !default;
$bp-small       : 550px !default;
$bp-medium      : 750px !default;
$bp-large       : 1000px !default;
$bp-extra-large : 1200px !default;

/// This is a map leveraged by the responsive query manager mixin. Its keys
/// and values should be kept in-sync with the preceding breakpoint variables.
$breakpoints: (
  'bp-extra-small': 400px,
  'bp-small': 550px,
  'bp-medium': 750px,
  'bp-large': 1000px,
  'bp-extra-large': 1200px
);

// Colors: feel free to define more here
$white: #ffffff !default;
$lightest-gray: #f1f1f1 !default;
$lighter-gray: #e1e1e1 !default;
$light-gray: #d1d1d1 !default;
$gray: #bbbbbb !default;
$dark-gray: #888888 !default;
$darker-gray: #555555 !default;
$darkest-gray: #333333 !default;
$almost-black: #222222 !default;
$bright-cyan: #33c3f0 !default;
$vivid-cyan: #1eaedb !default;

// Themed Color Variables: cite color variables for clarity
$primary-color: $bright-cyan !default;
$border-color: $lighter-gray !default;
$button-border-color: $gray !default;
$button-font-color: $darker-gray !default;
$button-hover-border-color: $dark-gray !default;
$button-hover-font-color: $darkest-gray !default;
$button-primary-font-color: $white !default;
$input-background-color: $white !default;
$input-border-color: $light-gray !default;
$code-background-color: $lightest-gray !default;
$link-color: $vivid-cyan !default;
$font-color: $almost-black !default;

// Typography
$font-stack: "Raleway", "HelveticaNeue", "Helvetica Neue", Helvetica, Arial, sans-serif !default;

//Grid Variables
$container-width: 960px !default;
$container-width-larger-than-bp-extra-small: 85% !default;
$container-width-larger-than-bp-small: 80% !default;
$total-columns: 12 !default;
$column-width: 100 / $total-columns !default; // Calculates individual column width based off of # of columns
$column-margin: 4% !default; // The default gutter size between columns

// Misc
$global-radius: 4px !default;


// Functions
// ––––––––––––––––––––––––––––––––––––––––––––––––––
@function grid-column-width($n) {
  @return $column-width * $n - ($column-margin*($total-columns - $n)/$total-columns);
}

@function grid-offset-length($n) {
  @return grid-column-width($n) + $column-margin;
}

// Mixins
// ––––––––––––––––––––––––––––––––––––––––––––––––––
/// Responsive manager.
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
/// This is best used to target specific rules, not groups of rules
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{inspect(map-get($breakpoints, $breakpoint))}) {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}


// Grid
// ––––––––––––––––––––––––––––––––––––––––––––––––––
.container {
  position: relative;

  box-sizing: border-box;
  width: 100%;
  max-width: 960px;
  margin: 0 auto;
  padding: 0 20px;
  @include respond-to('bp-extra-small') {
    width: $container-width-larger-than-bp-extra-small;
    padding: 0;
  }
  @include respond-to('bp-small') {
    width: $container-width-larger-than-bp-small;
  }
}
.column,
.columns {
  float: left;

  box-sizing: border-box;
  width: 100%;
  @include respond-to('bp-small') {
    margin-left: 4%;
    &:first-child {
      margin-left: 0;
    }
  }
}

// For devices larger than $bp-small
@media (min-width: $bp-small) {
  .one.column,
  .one.columns {
    width: grid-column-width(1);
  }
  .two.columns {
    width: grid-column-width(2);
  }
  .three.columns {
    width: grid-column-width(3);
  }
  .four.columns {
    width: grid-column-width(4);
  }
  .five.columns {
    width: grid-column-width(5);
  }
  .six.columns {
    width: grid-column-width(6);
  }
  .seven.columns {
    width: grid-column-width(7);
  }
  .eight.columns {
    width: grid-column-width(8);
  }
  .nine.columns {
    width: grid-column-width(9);
  }
  .ten.columns {
    width: grid-column-width(10);
  }
  .eleven.columns {
    width: grid-column-width(11);
  }
  .twelve.columns {
    width: grid-column-width(12);
  }

  .one-third.column {
    width: grid-column-width($total-columns/3);
  }
  .two-thirds.column {
    width: grid-column-width(($total-columns/3)*2);
  }

  .one-half.column {
    width: grid-column-width($total-columns/2);
  }

  // Offsets
  .offset-by-one.column,
  .offset-by-one.columns {
    margin-left: grid-offset-length(1);
  }
  .offset-by-two.column,
  .offset-by-two.columns {
    margin-left: grid-offset-length(2);
  }
  .offset-by-three.column,
  .offset-by-three.columns {
    margin-left: grid-offset-length(3);
  }
  .offset-by-four.column,
  .offset-by-four.columns {
    margin-left: grid-offset-length(4);
  }
  .offset-by-five.column,
  .offset-by-five.columns {
    margin-left: grid-offset-length(5);
  }
  .offset-by-six.column,
  .offset-by-six.columns {
    margin-left: grid-offset-length(6);
  }
  .offset-by-seven.column,
  .offset-by-seven.columns {
    margin-left: grid-offset-length(7);
  }
  .offset-by-eight.column,
  .offset-by-eight.columns {
    margin-left: grid-offset-length(8);
  }
  .offset-by-nine.column,
  .offset-by-nine.columns {
    margin-left: grid-offset-length(9);
  }
  .offset-by-ten.column,
  .offset-by-ten.columns {
    margin-left: grid-offset-length(10);
  }
  .offset-by-eleven.column,
  .offset-by-eleven.columns {
    margin-left: grid-offset-length(11);
  }

  .offset-by-one-third.column,
  .offset-by-one-third.columns {
    margin-left: grid-offset-length($total-columns/3);
  }
  .offset-by-two-thirds.column,
  .offset-by-two-thirds.columns {
    margin-left: grid-offset-length(($total-columns/3)*2);
  }

  .offset-by-one-half.column,
  .offset-by-one-half.columns {
    margin-left: grid-offset-length($total-columns/2);
  }
}


// Base Styles
// ––––––––––––––––––––––––––––––––––––––––––––––––––
/* NOTE
html is set to 62.5% so that all the REM measurements throughout Skeleton
are based on 10px sizing. So basically 1.5rem = 15px :) */
html {
  font-size: 62.5%;
}
body {
  font-family: $font-stack;
  font-size: 1.5em; /* Currently ems cause Chrome bug misinterpreting rems on body element */
  font-weight: 400;
  line-height: 1.6;

  color: $font-color;
}


// Typography
// ––––––––––––––––––––––––––––––––––––––––––––––––––
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 300;

  margin-top: 0;
  margin-bottom: 2rem;
}
h1 {
  font-size: 4.0rem;
  line-height: 1.2;

  letter-spacing: -0.1rem;
}
h2 {
  font-size: 3.6rem;
  line-height: 1.25;

  letter-spacing: -0.1rem;
}
h3 {
  font-size: 3.0rem;
  line-height: 1.3;

  letter-spacing: -0.1rem;
}
h4 {
  font-size: 2.4rem;
  line-height: 1.35;

  letter-spacing: -0.08rem;
}
h5 {
  font-size: 1.8rem;
  line-height: 1.5;

  letter-spacing: -0.05rem;
}
h6 {
  font-size: 1.5rem;
  line-height: 1.6;

  letter-spacing: 0;
}

// For devices larger than $bp-small
@media (min-width: $bp-small) {
  h1 {
    font-size: 5.0rem;
  }
  h2 {
    font-size: 4.2rem;
  }
  h3 {
    font-size: 3.6rem;
  }
  h4 {
    font-size: 3.0rem;
  }
  h5 {
    font-size: 2.4rem;
  }
  h6 {
    font-size: 1.5rem;
  }
}

p {
  margin-top: 0;
}


// Links
// ––––––––––––––––––––––––––––––––––––––––––––––––––
a {
  color: $link-color;
  &:hover {
    color: darken($link-color, 4%);
  }
}


// Buttons
// ––––––––––––––––––––––––––––––––––––––––––––––––––
.button,
button,
input[type='submit'],
input[type='reset'],
input[type='button'] {
  font-size: 11px;
  font-weight: 600;
  line-height: 38px;

  display: inline-block;

  box-sizing: border-box;
  height: 38px;
  padding: 0 30px;

  cursor: pointer;
  text-align: center;
  white-space: nowrap;
  text-decoration: none;
  letter-spacing: 0.1rem;
  text-transform: uppercase;

  color: $button-font-color;
  border: 1px solid $button-border-color;
  border-radius: $global-radius;
  background-color: transparent;
  &:hover,
  &:focus {
    color: $button-hover-font-color;
    border-color: $button-hover-border-color;
    outline: 0;
  }
  &.button-primary {
    color: $button-primary-font-color;
    border-color: $primary-color;
    background-color: $primary-color;
    &:hover,
    &:focus {
      color: $button-primary-font-color;
      border-color: $link-color;
      background-color: $link-color;
    }
  }
}


// Forms
// ––––––––––––––––––––––––––––––––––––––––––––––––––
input[type='email'],
input[type='number'],
input[type='search'],
input[type='text'],
input[type='tel'],
input[type='url'],
input[type='password'],
textarea,
select {
  box-sizing: border-box;
  height: 38px;
  padding: 6px 10px; /* The 6px vertically centers text on FF, ignored by Webkit */

  border: 1px solid $input-border-color;
  border-radius: $global-radius;
  background-color: $input-background-color;
  box-shadow: none;
  &:focus {
    border: 1px solid $primary-color;
    outline: 0;
  }
}
/* Removes awkward default styles on some inputs for iOS */
input[type='email'],
input[type='number'],
input[type='search'],
input[type='text'],
input[type='tel'],
input[type='url'],
input[type='password'],
textarea {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}
textarea {
  min-height: 65px;
  padding-top: 6px;
  padding-bottom: 6px;
}
label,
legend {
  font-weight: 600;

  display: block;

  margin-bottom: 0.5rem;
}
fieldset {
  padding: 0;

  border-width: 0;
}
input[type='checkbox'],
input[type='radio'] {
  display: inline;
}
label {
  > .label-body {
    font-weight: normal;

    display: inline-block;

    margin-left: 0.5rem;
  }
}


// Lists
// ––––––––––––––––––––––––––––––––––––––––––––––––––
ul {
  list-style: circle inside;
}
ol {
  list-style: decimal inside;
}
ol,
ul {
  margin-top: 0;
  padding-left: 0;
  ol,
  ul {
    font-size: 90%;

    margin: 1.5rem 0 1.5rem 3rem;
  }
}
li {
  margin-bottom: 1rem;
}


// Code
// ––––––––––––––––––––––––––––––––––––––––––––––––––
code {
  font-size: 90%;

  margin: 0 0.2rem;
  padding: 0.2rem 0.5rem;

  white-space: nowrap;

  border: 1px solid $border-color;
  border-radius: $global-radius;
  background: $code-background-color;
}
pre {
  > code {
    display: block;

    padding: 1rem 1.5rem;

    white-space: pre;
  }
}


// Tables
// ––––––––––––––––––––––––––––––––––––––––––––––––––
th,
td {
  padding: 12px 15px;

  text-align: left;

  border-bottom: 1px solid $border-color;
  &:first-child {
    padding-left: 0;
  }
  &:last-child {
    padding-right: 0;
  }
}


// Spacing
// ––––––––––––––––––––––––––––––––––––––––––––––––––
button,
.button {
  margin-bottom: 1rem;
}
input,
textarea,
select,
fieldset {
  margin-bottom: 1.5rem;
}
pre,
blockquote,
dl,
figure,
table,
p,
ul,
ol,
form {
  margin-bottom: 2.5rem;
}


// Utilities
// ––––––––––––––––––––––––––––––––––––––––––––––––––
.u-full-width {
  box-sizing: border-box;
  width: 100%;
}
.u-max-full-width {
  box-sizing: border-box;
  max-width: 100%;
}
.u-pull-right {
  float: right;
}
.u-pull-left {
  float: left;
}


// Miscellaneous
// ––––––––––––––––––––––––––––––––––––––––––––––––––
hr {
  margin-top: 3rem;
  margin-bottom: 3.5rem;

  border-width: 0;
  border-top: 1px solid $border-color;
}


// Clearing
// ––––––––––––––––––––––––––––––––––––––––––––––––––
.container:after,
.row:after,
.u-cf {
  display: table;
  clear: both;

  content: '';
}


// Media Queries
// ––––––––––––––––––––––––––––––––––––––––––––––––––
/// Note: The best way to structure the use of media queries is to create the
/// queries near the relevant code using the 'respond-to' mixin. For example,
/// if you wanted to change the styles for buttons on small devices, you would
/// include the 'respond-to' mixin with the 'bp-small' argument and write the
/// desired properties for the declaration block.
///
/// The more conventional method of handling media queries would be to insert
/// the following query blocks around the desired rules, but that kinda takes
/// the fun out of SASS, right?

// Larger than mobile
@media (min-width: $bp-extra-small) {}

// Larger than phablet (also point when grid becomes active)
@media (min-width: $bp-small) {}

// Larger than tablet
@media (min-width: $bp-medium) {}

// Larger than desktop
@media (min-width: $bp-large) {}

// Larger than Desktop HD
@media (min-width: $bp-extra-large) {}
